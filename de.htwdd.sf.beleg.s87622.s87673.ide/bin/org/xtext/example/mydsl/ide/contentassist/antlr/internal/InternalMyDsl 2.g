/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleUser_Stories
entryRuleUser_Stories
:
{ before(grammarAccess.getUser_StoriesRule()); }
	 ruleUser_Stories
{ after(grammarAccess.getUser_StoriesRule()); } 
	 EOF 
;

// Rule User_Stories
ruleUser_Stories 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getUser_StoriesAccess().getUser_storyAssignment()); }
			(rule__User_Stories__User_storyAssignment)
			{ after(grammarAccess.getUser_StoriesAccess().getUser_storyAssignment()); }
		)
		(
			{ before(grammarAccess.getUser_StoriesAccess().getUser_storyAssignment()); }
			(rule__User_Stories__User_storyAssignment)*
			{ after(grammarAccess.getUser_StoriesAccess().getUser_storyAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUser_Story
entryRuleUser_Story
:
{ before(grammarAccess.getUser_StoryRule()); }
	 ruleUser_Story
{ after(grammarAccess.getUser_StoryRule()); } 
	 EOF 
;

// Rule User_Story
ruleUser_Story 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUser_StoryAccess().getGroup()); }
		(rule__User_Story__Group__0)
		{ after(grammarAccess.getUser_StoryAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTitle
entryRuleTitle
:
{ before(grammarAccess.getTitleRule()); }
	 ruleTitle
{ after(grammarAccess.getTitleRule()); } 
	 EOF 
;

// Rule Title
ruleTitle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTitleAccess().getGroup()); }
		(rule__Title__Group__0)
		{ after(grammarAccess.getTitleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNutzen
entryRuleNutzen
:
{ before(grammarAccess.getNutzenRule()); }
	 ruleNutzen
{ after(grammarAccess.getNutzenRule()); } 
	 EOF 
;

// Rule Nutzen
ruleNutzen 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNutzenAccess().getGroup()); }
		(rule__Nutzen__Group__0)
		{ after(grammarAccess.getNutzenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRolle
entryRuleRolle
:
{ before(grammarAccess.getRolleRule()); }
	 ruleRolle
{ after(grammarAccess.getRolleRule()); } 
	 EOF 
;

// Rule Rolle
ruleRolle 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRolleAccess().getSubstantivAssignment()); }
		(rule__Rolle__SubstantivAssignment)
		{ after(grammarAccess.getRolleAccess().getSubstantivAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleZiel_Wunsch
entryRuleZiel_Wunsch
:
{ before(grammarAccess.getZiel_WunschRule()); }
	 ruleZiel_Wunsch
{ after(grammarAccess.getZiel_WunschRule()); } 
	 EOF 
;

// Rule Ziel_Wunsch
ruleZiel_Wunsch 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getZiel_WunschAccess().getGroup()); }
		(rule__Ziel_Wunsch__Group__0)
		{ after(grammarAccess.getZiel_WunschAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInfinitiv
entryRuleInfinitiv
:
{ before(grammarAccess.getInfinitivRule()); }
	 ruleInfinitiv
{ after(grammarAccess.getInfinitivRule()); } 
	 EOF 
;

// Rule Infinitiv
ruleInfinitiv 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInfinitivAccess().getWordAssignment()); }
		(rule__Infinitiv__WordAssignment)
		{ after(grammarAccess.getInfinitivAccess().getWordAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__0__Impl
	rule__User_Story__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getTitleAssignment_0()); }
	(rule__User_Story__TitleAssignment_0)
	{ after(grammarAccess.getUser_StoryAccess().getTitleAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__1__Impl
	rule__User_Story__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getUser_StoryAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__2__Impl
	rule__User_Story__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getUmKeyword_2()); }
	'Um'
	{ after(grammarAccess.getUser_StoryAccess().getUmKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__3__Impl
	rule__User_Story__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getNutzenAssignment_3()); }
	(rule__User_Story__NutzenAssignment_3)
	{ after(grammarAccess.getUser_StoryAccess().getNutzenAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__4__Impl
	rule__User_Story__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getMöchteIchAlsKeyword_4()); }
	', m\u00F6chte ich als'
	{ after(grammarAccess.getUser_StoryAccess().getMöchteIchAlsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__5__Impl
	rule__User_Story__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getRolleAssignment_5()); }
	(rule__User_Story__RolleAssignment_5)
	{ after(grammarAccess.getUser_StoryAccess().getRolleAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__6__Impl
	rule__User_Story__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getZiel_wunschAssignment_6()); }
	(rule__User_Story__Ziel_wunschAssignment_6)
	{ after(grammarAccess.getUser_StoryAccess().getZiel_wunschAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__User_Story__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUser_StoryAccess().getFullStopKeyword_7()); }
	'.'
	{ after(grammarAccess.getUser_StoryAccess().getFullStopKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Title__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__0__Impl
	rule__Title__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getSubstantivAssignment_0()); }
	(rule__Title__SubstantivAssignment_0)
	{ after(grammarAccess.getTitleAccess().getSubstantivAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Title__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTitleAccess().getInfinitivAssignment_1()); }
	(rule__Title__InfinitivAssignment_1)
	{ after(grammarAccess.getTitleAccess().getInfinitivAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Nutzen__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nutzen__Group__0__Impl
	rule__Nutzen__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNutzenAccess().getSubjectAssignment_0()); }
	(rule__Nutzen__SubjectAssignment_0)
	{ after(grammarAccess.getNutzenAccess().getSubjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Nutzen__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNutzenAccess().getVerbAssignment_1()); }
	(rule__Nutzen__VerbAssignment_1)
	{ after(grammarAccess.getNutzenAccess().getVerbAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Ziel_Wunsch__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ziel_Wunsch__Group__0__Impl
	rule__Ziel_Wunsch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Ziel_Wunsch__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZiel_WunschAccess().getSubjectAssignment_0()); }
	(rule__Ziel_Wunsch__SubjectAssignment_0)
	{ after(grammarAccess.getZiel_WunschAccess().getSubjectAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ziel_Wunsch__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Ziel_Wunsch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Ziel_Wunsch__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getZiel_WunschAccess().getInfinitivAssignment_1()); }
	(rule__Ziel_Wunsch__InfinitivAssignment_1)
	{ after(grammarAccess.getZiel_WunschAccess().getInfinitivAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__User_Stories__User_storyAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUser_StoriesAccess().getUser_storyUser_StoryParserRuleCall_0()); }
		ruleUser_Story
		{ after(grammarAccess.getUser_StoriesAccess().getUser_storyUser_StoryParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__TitleAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUser_StoryAccess().getTitleTitleParserRuleCall_0_0()); }
		ruleTitle
		{ after(grammarAccess.getUser_StoryAccess().getTitleTitleParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__NutzenAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUser_StoryAccess().getNutzenNutzenParserRuleCall_3_0()); }
		ruleNutzen
		{ after(grammarAccess.getUser_StoryAccess().getNutzenNutzenParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__RolleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUser_StoryAccess().getRolleRolleParserRuleCall_5_0()); }
		ruleRolle
		{ after(grammarAccess.getUser_StoryAccess().getRolleRolleParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__User_Story__Ziel_wunschAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUser_StoryAccess().getZiel_wunschZiel_WunschParserRuleCall_6_0()); }
		ruleZiel_Wunsch
		{ after(grammarAccess.getUser_StoryAccess().getZiel_wunschZiel_WunschParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__SubstantivAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0_0()); }
		RULE_UPPERCASE_WORD
		{ after(grammarAccess.getTitleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Title__InfinitivAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTitleAccess().getInfinitivInfinitivParserRuleCall_1_0()); }
		ruleInfinitiv
		{ after(grammarAccess.getTitleAccess().getInfinitivInfinitivParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__SubjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNutzenAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0()); }
		RULE_UPPERCASE_WORD
		{ after(grammarAccess.getNutzenAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Nutzen__VerbAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNutzenAccess().getVerbLOWERCASE_WORDTerminalRuleCall_1_0()); }
		RULE_LOWERCASE_WORD
		{ after(grammarAccess.getNutzenAccess().getVerbLOWERCASE_WORDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rolle__SubstantivAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRolleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0()); }
		RULE_UPPERCASE_WORD
		{ after(grammarAccess.getRolleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ziel_Wunsch__SubjectAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getZiel_WunschAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0()); }
		RULE_UPPERCASE_WORD
		{ after(grammarAccess.getZiel_WunschAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Ziel_Wunsch__InfinitivAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getZiel_WunschAccess().getInfinitivInfinitivParserRuleCall_1_0()); }
		ruleInfinitiv
		{ after(grammarAccess.getZiel_WunschAccess().getInfinitivInfinitivParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Infinitiv__WordAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInfinitivAccess().getWordLOWERCASE_WORDTerminalRuleCall_0()); }
		RULE_LOWERCASE_WORD
		{ after(grammarAccess.getInfinitivAccess().getWordLOWERCASE_WORDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_UPPERCASE_WORD : RULE_UPERCASE_LETTER RULE_LOWERCASE_LETTER+;

RULE_LOWERCASE_WORD : RULE_LOWERCASE_LETTER+;

fragment RULE_UPERCASE_LETTER : ('A'..'Z'|'\u00C4'|'\u00DC'|'\u00D6');

fragment RULE_LOWERCASE_LETTER : ('a'..'z'|'\u00E4'|'\u00FC'|'\u00F6'|'\u00DF');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
