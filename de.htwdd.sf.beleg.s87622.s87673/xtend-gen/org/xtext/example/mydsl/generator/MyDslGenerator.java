/**
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.util.List;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Nutzen;
import org.xtext.example.mydsl.myDsl.Rolle;
import org.xtext.example.mydsl.myDsl.Title;
import org.xtext.example.mydsl.myDsl.User_Story;
import org.xtext.example.mydsl.myDsl.Ziel_Wunsch;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final List<User_Story> userStories = IteratorExtensions.<User_Story>toList(Iterators.<User_Story>filter(resource.getAllContents(), User_Story.class));
    int _size = userStories.size();
    String _plus = (Integer.valueOf(_size) + "\n");
    InputOutput.<String>print(_plus);
    fsa.generateFile("user_stories.txt", this.generateJSON(userStories));
  }

  public String generateJSON(final List<User_Story> userStories) {
    final StringBuilder jsonBuilder = new StringBuilder();
    int _size = userStories.size();
    String _plus = (Integer.valueOf(_size) + "\n");
    InputOutput.<String>print(_plus);
    jsonBuilder.append("[").append("\n");
    for (final User_Story userStory : userStories) {
      {
        Title _title = userStory.getTitle();
        String _plus_1 = (_title + "\n");
        InputOutput.<String>print(_plus_1);
        jsonBuilder.append("  {\n");
        this.appendJsonProperty(jsonBuilder, "Title", this.formatTitle(userStory.getTitle())).append(",\n");
        this.appendJsonProperty(jsonBuilder, "Nutzen", this.formatNutzen(userStory.getNutzen())).append(",\n");
        this.appendJsonProperty(jsonBuilder, "Rolle", this.formatRolle(userStory.getRolle())).append(",\n");
        this.appendJsonProperty(jsonBuilder, "Ziel_Wunsch", this.formatZielWunsch(userStory.getZiel_wunsch())).append("\n");
        jsonBuilder.append("  },\n");
      }
    }
    InputOutput.<StringBuilder>print(jsonBuilder);
    boolean _isEmpty = userStories.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      int _length = jsonBuilder.length();
      int _minus = (_length - 2);
      jsonBuilder.deleteCharAt(_minus);
    }
    jsonBuilder.append("]").append("\n");
    InputOutput.<StringBuilder>print(jsonBuilder);
    return jsonBuilder.toString();
  }

  public String formatTitle(final Title title) {
    String _substantiv = title.getSubstantiv();
    String _plus = (_substantiv + " ");
    String _word = title.getInfinitiv().getWord();
    return (_plus + _word);
  }

  public String formatNutzen(final Nutzen nutzen) {
    String _subject = nutzen.getSubject();
    String _plus = (_subject + " ");
    String _verb = nutzen.getVerb();
    return (_plus + _verb);
  }

  public String formatRolle(final Rolle rolle) {
    return rolle.getSubstantiv();
  }

  public String formatZielWunsch(final Ziel_Wunsch zielWunsch) {
    String _subject = zielWunsch.getSubject();
    String _plus = (_subject + " ");
    String _word = zielWunsch.getInfinitiv().getWord();
    return (_plus + _word);
  }

  public StringBuilder appendJsonProperty(final StringBuilder builder, final String key, final String value) {
    builder.append("  \"").append(key).append("\": \"").append(value).append("\"");
    return builder;
  }
}
