/*
 * generated by Xtext 2.32.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "User_Stories";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleUser_Stories
entryRuleUser_Stories returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUser_StoriesRule()); }
	iv_ruleUser_Stories=ruleUser_Stories
	{ $current=$iv_ruleUser_Stories.current; }
	EOF;

// Rule User_Stories
ruleUser_Stories returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getUser_StoriesAccess().getUser_storyUser_StoryParserRuleCall_0());
			}
			lv_user_story_0_0=ruleUser_Story
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getUser_StoriesRule());
				}
				add(
					$current,
					"user_story",
					lv_user_story_0_0,
					"org.xtext.example.mydsl.MyDsl.User_Story");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleUser_Story
entryRuleUser_Story returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUser_StoryRule()); }
	iv_ruleUser_Story=ruleUser_Story
	{ $current=$iv_ruleUser_Story.current; }
	EOF;

// Rule User_Story
ruleUser_Story returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getUser_StoryAccess().getTitleTitleParserRuleCall_0_0());
				}
				lv_title_0_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUser_StoryRule());
					}
					set(
						$current,
						"title",
						lv_title_0_0,
						"org.xtext.example.mydsl.MyDsl.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getUser_StoryAccess().getColonKeyword_1());
		}
		otherlv_2='Um'
		{
			newLeafNode(otherlv_2, grammarAccess.getUser_StoryAccess().getUmKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUser_StoryAccess().getNutzenNutzenParserRuleCall_3_0());
				}
				lv_nutzen_3_0=ruleNutzen
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUser_StoryRule());
					}
					set(
						$current,
						"nutzen",
						lv_nutzen_3_0,
						"org.xtext.example.mydsl.MyDsl.Nutzen");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=', m\u00F6chte ich als'
		{
			newLeafNode(otherlv_4, grammarAccess.getUser_StoryAccess().getMÃ¶chteIchAlsKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getUser_StoryAccess().getRolleRolleParserRuleCall_5_0());
				}
				lv_rolle_5_0=ruleRolle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUser_StoryRule());
					}
					set(
						$current,
						"rolle",
						lv_rolle_5_0,
						"org.xtext.example.mydsl.MyDsl.Rolle");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getUser_StoryAccess().getZiel_wunschZiel_WunschParserRuleCall_6_0());
				}
				lv_ziel_wunsch_6_0=ruleZiel_Wunsch
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getUser_StoryRule());
					}
					set(
						$current,
						"ziel_wunsch",
						lv_ziel_wunsch_6_0,
						"org.xtext.example.mydsl.MyDsl.Ziel_Wunsch");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='.'
		{
			newLeafNode(otherlv_7, grammarAccess.getUser_StoryAccess().getFullStopKeyword_7());
		}
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current; }
	EOF;

// Rule Title
ruleTitle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_substantiv_0_0=RULE_UPPERCASE_WORD
				{
					newLeafNode(lv_substantiv_0_0, grammarAccess.getTitleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTitleRule());
					}
					setWithLastConsumed(
						$current,
						"substantiv",
						lv_substantiv_0_0,
						"org.xtext.example.mydsl.MyDsl.UPPERCASE_WORD");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTitleAccess().getInfinitivInfinitivParserRuleCall_1_0());
				}
				lv_infinitiv_1_0=ruleInfinitiv
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTitleRule());
					}
					set(
						$current,
						"infinitiv",
						lv_infinitiv_1_0,
						"org.xtext.example.mydsl.MyDsl.Infinitiv");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNutzen
entryRuleNutzen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNutzenRule()); }
	iv_ruleNutzen=ruleNutzen
	{ $current=$iv_ruleNutzen.current; }
	EOF;

// Rule Nutzen
ruleNutzen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_subject_0_0=RULE_UPPERCASE_WORD
				{
					newLeafNode(lv_subject_0_0, grammarAccess.getNutzenAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNutzenRule());
					}
					setWithLastConsumed(
						$current,
						"subject",
						lv_subject_0_0,
						"org.xtext.example.mydsl.MyDsl.UPPERCASE_WORD");
				}
			)
		)
		(
			(
				lv_verb_1_0=RULE_LOWERCASE_WORD
				{
					newLeafNode(lv_verb_1_0, grammarAccess.getNutzenAccess().getVerbLOWERCASE_WORDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNutzenRule());
					}
					setWithLastConsumed(
						$current,
						"verb",
						lv_verb_1_0,
						"org.xtext.example.mydsl.MyDsl.LOWERCASE_WORD");
				}
			)
		)
	)
;

// Entry rule entryRuleRolle
entryRuleRolle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRolleRule()); }
	iv_ruleRolle=ruleRolle
	{ $current=$iv_ruleRolle.current; }
	EOF;

// Rule Rolle
ruleRolle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_substantiv_0_0=RULE_UPPERCASE_WORD
			{
				newLeafNode(lv_substantiv_0_0, grammarAccess.getRolleAccess().getSubstantivUPPERCASE_WORDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getRolleRule());
				}
				setWithLastConsumed(
					$current,
					"substantiv",
					lv_substantiv_0_0,
					"org.xtext.example.mydsl.MyDsl.UPPERCASE_WORD");
			}
		)
	)
;

// Entry rule entryRuleZiel_Wunsch
entryRuleZiel_Wunsch returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getZiel_WunschRule()); }
	iv_ruleZiel_Wunsch=ruleZiel_Wunsch
	{ $current=$iv_ruleZiel_Wunsch.current; }
	EOF;

// Rule Ziel_Wunsch
ruleZiel_Wunsch returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_subject_0_0=RULE_UPPERCASE_WORD
				{
					newLeafNode(lv_subject_0_0, grammarAccess.getZiel_WunschAccess().getSubjectUPPERCASE_WORDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getZiel_WunschRule());
					}
					setWithLastConsumed(
						$current,
						"subject",
						lv_subject_0_0,
						"org.xtext.example.mydsl.MyDsl.UPPERCASE_WORD");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getZiel_WunschAccess().getInfinitivInfinitivParserRuleCall_1_0());
				}
				lv_infinitiv_1_0=ruleInfinitiv
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getZiel_WunschRule());
					}
					set(
						$current,
						"infinitiv",
						lv_infinitiv_1_0,
						"org.xtext.example.mydsl.MyDsl.Infinitiv");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInfinitiv
entryRuleInfinitiv returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInfinitivRule()); }
	iv_ruleInfinitiv=ruleInfinitiv
	{ $current=$iv_ruleInfinitiv.current; }
	EOF;

// Rule Infinitiv
ruleInfinitiv returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_word_0_0=RULE_LOWERCASE_WORD
			{
				newLeafNode(lv_word_0_0, grammarAccess.getInfinitivAccess().getWordLOWERCASE_WORDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getInfinitivRule());
				}
				setWithLastConsumed(
					$current,
					"word",
					lv_word_0_0,
					"org.xtext.example.mydsl.MyDsl.LOWERCASE_WORD");
			}
		)
	)
;

RULE_UPPERCASE_WORD : RULE_UPERCASE_LETTER RULE_LOWERCASE_LETTER+;

RULE_LOWERCASE_WORD : RULE_LOWERCASE_LETTER+;

fragment RULE_UPERCASE_LETTER : ('A'..'Z'|'\u00C4'|'\u00DC'|'\u00D6');

fragment RULE_LOWERCASE_LETTER : ('a'..'z'|'\u00E4'|'\u00FC'|'\u00F6'|'\u00DF');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
