/*
 * generated by Xtext 2.32.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.xtext.example.mydsl.myDsl.User_Story
import java.util.List
import org.xtext.example.mydsl.myDsl.Title
import org.xtext.example.mydsl.myDsl.Nutzen
import org.xtext.example.mydsl.myDsl.Rolle
import org.xtext.example.mydsl.myDsl.Ziel_Wunsch

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyDslGenerator extends AbstractGenerator {
 
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val userStories = resource.allContents.filter(User_Story).toList()
		print(userStories.size() +"\n")

		fsa.generateFile('user_stories.txt', generateJSON(userStories))
	}
 
	def String generateJSON(List<User_Story> userStories) {
		val jsonBuilder = new StringBuilder
		print(userStories.size() +"\n")
		jsonBuilder.append('[').append('\n')
		for (userStory : userStories) {
			print(userStory.title +"\n")
			jsonBuilder.append("  {\n")
			appendJsonProperty(jsonBuilder, "Title", formatTitle(userStory.title)).append(",\n")
			appendJsonProperty(jsonBuilder, "Nutzen", formatNutzen(userStory.nutzen)).append(",\n")
			appendJsonProperty(jsonBuilder, "Rolle", formatRolle(userStory.rolle)).append(",\n")
			appendJsonProperty(jsonBuilder, "Ziel_Wunsch", formatZielWunsch(userStory.ziel_wunsch)).append('\n')
			jsonBuilder.append("  },\n")
		}
		print(jsonBuilder)
		// Remove the trailing comma if there are user stories
		if (!userStories.isEmpty()) {
			jsonBuilder.deleteCharAt(jsonBuilder.length() - 2)
		}
		jsonBuilder.append(']').append('\n')
		print(jsonBuilder)
		return jsonBuilder.toString
	}
 
	

	def String formatTitle(Title title) {
		return title.substantiv + " " + title.infinitiv.word
	}
	def String formatNutzen(Nutzen nutzen) {
		return nutzen.subject + " " + nutzen.verb
	}
	def String formatRolle(Rolle rolle) {
		return rolle.substantiv
	}
	def String formatZielWunsch(Ziel_Wunsch zielWunsch) {
		return zielWunsch.subject + " " + zielWunsch.infinitiv.word
	}
	def StringBuilder appendJsonProperty(StringBuilder builder, String key, String value) {
		builder.append("  \"").append(key).append("\": \"").append(value).append("\"")
		return builder
	}
}
